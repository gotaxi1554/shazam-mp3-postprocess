import os
import re
from glob import glob
from tqdm import tqdm
from mutagen.mp3 import MP3
from mutagen.id3 import ID3, APIC, USLT, TIT2, TPE1, TALB, TDRC

from utils import (
    clean_filename,
    extract_artist_title,
    normalize_audio,
    fetch_cover_image,
    fetch_lyrics,
    update_tags_and_save
)

def process_file(filepath, report):
    try:
        # –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        filename = os.path.basename(filepath)
        cleaned_name = clean_filename(filename)
        if cleaned_name != filename:
            os.rename(filepath, os.path.join(os.path.dirname(filepath), cleaned_name))
            filepath = os.path.join(os.path.dirname(filepath), cleaned_name)

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        artist, title = extract_artist_title(cleaned_name)
        if not artist or not title:
            report['errors'].append(filepath)
            return

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–∞
        if normalize_audio(filepath):
            report['normalized'] += 1

        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–∫–∏
        audio = MP3(filepath, ID3=ID3)
        cover_added = False
        if not any(isinstance(frame, APIC) for frame in audio.tags.values()):
            cover_data = fetch_cover_image(artist, title)
            if cover_data:
                audio.tags.add(APIC(
                    encoding=3,
                    mime='image/jpeg',
                    type=3,
                    desc='Cover',
                    data=cover_data
                ))
                cover_added = True

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏
        lyrics_added = False
        if not any(isinstance(frame, USLT) for frame in audio.tags.values()):
            lyrics = fetch_lyrics(artist, title)
            if lyrics:
                audio.tags.add(USLT(encoding=3, lang='eng', desc='Lyrics', text=lyrics))
                lyrics_added = True

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
        updated = update_tags_and_save(audio, artist, title)

        if updated:
            report['tags'] += 1
        if cover_added:
            report['covers'] += 1
        if lyrics_added:
            report['lyrics'] += 1
        report['processed'] += 1

    except Exception as e:
        report['errors'].append(filepath)


def main():
    folder = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –∏–º—è –ø–∞–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: CD62): ").strip()
    folder_path = os.path.join("/sdcard/Music", folder)
    if not os.path.exists(folder_path):
        print(f"‚ùå –ü–∞–ø–∫–∞ {folder_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    files = sorted(glob(os.path.join(folder_path, "*.mp3")))
    if not files:
        print("‚ùó –í –ø–∞–ø–∫–µ –Ω–µ—Ç MP3-—Ñ–∞–π–ª–æ–≤.")
        return

    report = {
        'processed': 0,
        'normalized': 0,
        'tags': 0,
        'covers': 0,
        'lyrics': 0,
        'errors': []
    }

    print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–∞–ø–∫–µ: {folder_path}\n")

    for filepath in tqdm(files, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫–æ–≤", unit="—Ç—Ä–µ–∫"):
        process_file(filepath, report)

    print("\n=== –û—Ç—á—ë—Ç ===")
    print(f"‚úî –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {report['processed']}")
    print(f"üéß –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {report['normalized']}")
    print(f"üè∑Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–≥–æ–≤: {report['tags']}")
    print(f"üñºÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–ª–æ–∂–µ–∫: {report['covers']}")
    print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Å–µ–Ω: {report['lyrics']}")
    print(f"‚ö† –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(report['errors'])}")
    if report['errors']:
        print("\n–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for f in report['errors']:
            print("-", f)

if __name__ == "__main__":
    main()
