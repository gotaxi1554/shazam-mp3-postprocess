import os
import re
import sys
from glob import glob
from mutagen.mp3 import MP3
from mutagen.id3 import ID3, APIC, USLT, TIT2, TPE1, TALB, TDRC
from tqdm import tqdm

def process_file(filepath, report):
    try:
        # –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        filename = os.path.basename(filepath)
        cleaned_name = clean_filename(filename)
        if cleaned_name != filename:
            os.rename(filepath, os.path.join(os.path.dirname(filepath), cleaned_name))
            filepath = os.path.join(os.path.dirname(filepath), cleaned_name)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        artist, title = extract_artist_title(cleaned_name)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º MP3
        audio = MP3(filepath, ID3=ID3)
        if audio.tags is None:
            audio.add_tags()

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–∞ (–ø—Å–µ–≤–¥–æ, –∑–∞–º–µ–Ω–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        normalize_audio(filepath)
        report['normalized'] += 1

        # –û–±–ª–æ–∂–∫–∞
        cover_added = fetch_cover_image(audio, artist, title)
        if cover_added:
            report['covers'] += 1

        # –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
        lyrics_added = fetch_lyrics(audio, artist, title)
        if lyrics_added:
            report['lyrics'] += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏
        updated = update_tags_and_save(audio, filepath, artist, title)
        if updated:
            report['tags'] += 1

        report['processed'] += 1

    except Exception as e:
        report['errors'] += 1
        report['error_files'].append((filepath, str(e)))


def main():
    folder_input = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –∏–º—è –ø–∞–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: CD62): ").strip()
    music_dir = os.path.join("/sdcard/Music", folder_input)

    if not os.path.isdir(music_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {music_dir}")
        sys.exit(1)

    mp3_files = sorted(glob(os.path.join(music_dir, '*.mp3')))
    report = {
        'processed': 0,
        'normalized': 0,
        'tags': 0,
        'covers': 0,
        'lyrics': 0,
        'errors': 0,
        'error_files': []
    }

    print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–∞–ø–∫–µ: {music_dir}")
    for filepath in tqdm(mp3_files, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫–æ–≤"):
        process_file(filepath, report)

    print("\n=== –û—Ç—á—ë—Ç ===")
    print(f"‚úî –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–µ–∫–æ–≤: {report['processed']}")
    print(f"üéß –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {report['normalized']}")
    print(f"üè∑Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–≥–æ–≤: {report['tags']}")
    print(f"üñºÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–ª–æ–∂–µ–∫: {report['covers']}")
    print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Å–µ–Ω: {report['lyrics']}")
    print(f"‚ö† –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {report['errors']}")
    if report['errors']:
        for f, err in report['error_files']:
            print(f" - {os.path.basename(f)}: {err}")

if __name__ == "__main__":
    main()
